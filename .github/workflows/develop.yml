# Feature -> Development Branch
name: Push feature naar development

on:
  push:
    branches:
      - 'feature/**'
      - feature

jobs:
  devskim:
    name: DevSkim Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run DevSkim
        uses: microsoft/DevSkim-Action@v1
        with:
          directory-to-scan: '.'
          output-filename: devskim-results.sarif

      - name: Convert SARIF to readable text
        run: |
          cat devskim-results.sarif
          jq -r '.runs[].results[] | "[\(.level)] \(.ruleId): \(.message.text)"' devskim-results.sarif > devskim-report.txt || true
          [ -s devskim-report.txt ] || echo "No DevSkim issues found." > devskim-report.txt
          cat devskim-report.txt

      - name: Upload DevSkim Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: devskim-report
          path: devskim-report.txt

  html-validate:
    name: HTML Validate
    needs: [devskim]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install html-validate
        run: npm install --save-dev html-validate

      - name: Install Prettier
        run: npm install --save-dev prettier

      - name: Install tidy-html5
        run: sudo apt-get install -y tidy

      - name: Prettier auto-fix HTML
        run: |
          if find . -name "*.htm" | grep -q .; then
            echo "Found .htm files, running Prettier on them."
            npx prettier "**/*.htm" --write || true
          else
            echo "No .htm files found, skipping Prettier for .htm files."
          fi
          npx prettier "**/*.html" --write || true

      - name: Apply basic HTML fixes with tidy
        run: |
          for f in $(find . -name "*.html" -o -name "*.htm"); do
          tidy -config tidy.conf -modify "$f" >/dev/null 2>&1 || true
          done

      - name: Run html-validate
        run: |
          npx html-validate "**/*.html" "**/*.htm" --config htmlvalidate.json --formatter stylish > html-validate-report.txt || true
          [ -s html-validate-report.txt ] || echo "" > html-validate-report.txt
          cat html-validate-report.txt

      - name: Upload HTML-validate Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-validate-report
          path: html-validate-report.txt

  stylelint:
    name: Stylelint
    needs: [devskim]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install stylelint-config-recommended --save-dev

      - name: List CSS files
        run: |
          echo "Listing CSS files:"
          find . -type f -name "*.css" -o -name "*.scss" -o -name "*.sass"

      - name: Run Stylelint
        run: |
          echo "Running Stylelint..."
          if [ ! -f stylelint-report.txt ]; then
          touch stylelint-report.txt
          fi
          npx stylelint --fix "**/*.css" "**/*.scss" "**/*.sass" --config stylelintrc.json --output-file stylelint-report.txt || true
          [ -s stylelint-report.txt ] || echo "" --output-file stylelint-report.txt
          cat stylelint-report.txt

      - name: Upload Stylelint Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: stylelint-report
          path: stylelint-report.txt

  eslint:
    name: ESLint
    needs: [devskim]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ESLint and plugins
        run: npm install --save-dev eslint @eslint/js globals @typescript-eslint/eslint-plugin @typescript-eslint/parser @eslint/json @eslint/markdown prettier eslint-config-prettier eslint-plugin-prettier

      - name: Run ESLint # Controleer of er .ts-bestanden zijn en voer ESLint uit met --fix
        run: | 
          echo "Running ESLint..."
          if [ ! -f eslint-report.txt ]; then
            touch eslint-report.txt
          fi
          ls -la
          if ls **/*.ts 1> /dev/null 2>&1; then
            echo "Found .ts files, running ESLint on them."
            npx eslint --fix --no-ignore "**/*.ts" --output-file eslint-report.txt || true
          else
            echo "No .ts files found, skipping ESLint for .ts files."
          fi
          npx eslint --fix "**/*.js" "**/*.json" --ignore-pattern package-lock.json --config eslint.config.mjs --output-file eslint-report.txt || true
          [ -s eslint-report.txt ] || echo "" > eslint-report.txt
          cat eslint-report.txt

      - name: Upload ESLint Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.txt

  phpcs:
    name: PHP Code Sniffer
    needs: [devskim]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PHP_CodeSniffer
        run: composer global require "squizlabs/php_codesniffer=*"

      - name: Run PHPCS
        run: |
          FILES=$(find . -type f \( -name "*.php" -o -name "*.tpl" -o -name "*.html" -o -name "*.htm" -o -name "*.phtml" -o -name "*.inc" \))
          ~/.composer/vendor/bin/phpcbf --standard=PSR12 $FILES || true
          ~/.composer/vendor/bin/phpcs --standard=PSR12 $FILES > phpcs-report.txt || true
          [ -s phpcs-report.txt ] || echo "" > phpcs-report.txt
          cat phpcs-report.txt

      - name: Upload PHP Code Sniffer Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: phpcs-report
          path: phpcs-report.txt

  logs:
    name: Reports
    runs-on: ubuntu-latest
    needs: [devskim, html-validate, stylelint, eslint, phpcs]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts via GH CLI
        run: |
          if [ ! -f .github/scripts/download-artifacts.sh ]; then
            echo "❌ Script ontbreekt!"
            exit 1
          fi
          chmod +x .github/scripts/download-artifacts.sh
          .github/scripts/download-artifacts.sh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Zet gedownloade artifacts terug naar root
        run: |
          cp artifacts/*/*.txt . || true
          cp artifacts/*/*.sarif . || true

      - name: DevSkim Results Report
        run: | # Check hier later ook toevoegen als hieronder, wanneer devskim werkt.
          echo "---- DevSkim SARIF Report Result ----"
          if [ "$(stat -c %s devskim-results.sarif)" -gt 1 ]; then
            cat devskim-results.sarif
          else
            echo "No DevSkim issues found."
          fi
          echo "---- -------------------- ----"

      - name: HTML-validate Results Report
        run: |
          echo "---- HTML-validate Report Result ----"
          if [ "$(stat -c %s html-validate-report.txt)" -gt 1 ]; then
            cat html-validate-report.txt
          else
            echo "No HTML issues found."
          fi
          echo "---- -------------------- ----"

      - name: Stylelint Results Report
        run: |
          echo "---- Stylelint Report Result ----"
          if [ "$(stat -c %s stylelint-report.txt)" -gt 1 ]; then
            cat stylelint-report.txt
          else
            echo "No CSS issues found."
          fi
          echo "---- -------------------- ----"

      - name: Eslint Results Report
        run: |
          echo "---- Eslint Report Result ----"
          if [ "$(stat -c %s eslint-report.txt)" -gt 1 ]; then
            cat eslint-report.txt
          else
            echo "No Javascript issues found."
          fi
          echo "---- -------------------- ----"  

      - name: PHP Code Sniffer Results Report
        run: |
          echo "---- PHP Code Sniffer Report Result ----"
          if [ "$(stat -c %s phpcs-report.txt)" -gt 1 ]; then
            cat phpcs-report.txt
          else
            echo "No PHP issues found."
          fi
          echo "---- -------------------- ----"

  errors:
    name: Foutcontrole op linter logs
    runs-on: ubuntu-latest
    needs: [devskim, html-validate, stylelint, eslint, phpcs]
    steps:
      - name: Download all artifacts via GH CLI
        run: |
          if [ ! -f .github/scripts/download-artifacts.sh ]; then
            echo "❌ Script ontbreekt!"
            exit 1
          fi
          chmod +x .github/scripts/download-artifacts.sh
          .github/scripts/download-artifacts.sh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Zet gedownloade artifacts terug naar root
        run: |
          cp artifacts/*/*.txt . || true
          cp artifacts/*/*.sarif . || true

      - name: Controleer op DevSkim errors
        run: |
          if [ -f devskim-results.sarif ]; then
            ERROR_COUNT=$(jq '.runs[].results[] | select(.level == "error")' devskim-results.sarif | wc -l)
            echo "Debug: Aantal gevonden DevSkim errors = $ERROR_COUNT" # Debugging line
            if [ "$ERROR_COUNT" -gt 0 ]; then
              echo "❌ DevSkim vond $ERROR_COUNT fouten (level = error)"
              exit 1
            else
              echo "✅ Geen DevSkim fouten met level 'error' gevonden."
            fi
          else
            echo "⚠️ Geen devskim-results.sarif bestand gevonden. Controle overgeslagen."
          fi

      - name: Foutcontrole HTML Validate
        run: |
          ERROR_COUNT=$(grep -Ei "error(s)?:" html-validate-report.txt | wc -l)
          echo "Debug: Aantal HTML Validate errors = $ERROR_COUNT" # Debugging line
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "❌ HTML Validate vond $ERROR_COUNT fouten"
            exit 1
          fi

      - name: Foutcontrole Stylelint
        run: |
          ERROR_COUNT=$(grep -Ei "error(s)?" stylelint-report.txt | wc -l)
          echo "Debug: Aantal Stylelint errors = $ERROR_COUNT" # Debugging line
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "❌ Stylelint vond $ERROR_COUNT fouten"
            exit 1
          fi

      - name: Foutcontrole ESLint
        run: |
          ERROR_COUNT=$(grep -Ei "✖ [0-9]+ problems \([0-9]+ errors" eslint-report.txt | sed -E 's/.*✖ [0-9]+ problems \([0-9]+ errors, ([0-9]+) warnings\).*/\1/')
          echo "Debug: Aantal ESLint errors = $ERROR_COUNT" # Debugging line
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "❌ ESLint vond $ERROR_COUNT fouten"
            exit 1
          fi

      - name: Foutcontrole PHP_CodeSniffer
        run: |
          ERROR_COUNT=$(grep -Ei "FOUND ([0-9]+) ERRORS" phpcs-report.txt | sed -E 's/FOUND ([0-9]+) ERRORS.*/\1/')
          echo "Debug: Aantal PHPCS errors = $ERROR_COUNT" # Debugging line
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "❌ PHPCS vond $ERROR_COUNT fouten"
            exit 1
          fi

  artifacts:
    name: Upload Artifacts
    runs-on: ubuntu-latest
    needs: [logs]
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts via GH CLI
        run: |
          if [ ! -f .github/scripts/download-artifacts.sh ]; then
            echo "❌ Script ontbreekt!"
            exit 1
          fi
          chmod +x .github/scripts/download-artifacts.sh
          .github/scripts/download-artifacts.sh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check .txt output
        run: ls -la

      - name: Zet gedownloade artifacts terug naar root
        run: |
          find artifacts -type f -name "*.txt" -size +1c -exec cp {} . \;
          find artifacts -type f -name "*.sarif" -size +0c -exec cp {} . \;

      - name: Upload DevSkim SARIF
        uses: actions/upload-artifact@v4
        with:
          name: devskim-sarif
          path: devskim-report.txt

      - name: Upload Linter logs
        uses: actions/upload-artifact@v4
        with:
          name: linter-reports
          path: |
            html-validate-report.txt
            stylelint-report.txt
            eslint-report.txt
            phpcs-report.txt

  test-and-push:
    name: Merge naar development na lint checks
    runs-on: ubuntu-latest
    needs: [errors]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch all branches
        run: git fetch --all

      - name: Merge feature into development
        run: |
          git fetch origin
          git checkout -B development origin/development
          git merge ${{ github.ref_name }} --no-ff --no-edit --allow-unrelated-histories -X theirs || {
              echo "Conflict bij merge naar development";
              exit 1;
          }
          git push origin development

      - name: Merge updated development terug naar feature
        run: |
          git fetch origin
          git checkout ${{ github.ref_name }}
          git merge origin/development --no-ff --no-edit --allow-unrelated-histories || {
            echo "Conflict bij merge van development terug naar feature";
            exit 1;
          }
          git push origin ${{ github.ref_name }}

      - name: Rebase feature branch op development
        run: |
          git fetch origin
          git checkout ${{ github.ref_name }}
          git rebase origin/development

      - name: Merge naar development
        if: success()
        run: |
          short_sha=$(echo "${{ github.sha }}" | cut -c1-7)
          git fetch origin
          git checkout development
          git merge --no-ff --allow-unrelated-histories origin/${{ github.ref_name }} -m "✅ Auto-merge from ${{ github.ref_name }} (commit $short_sha) on $(date -u '+%Y-%m-%d')"
          git push origin development
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

